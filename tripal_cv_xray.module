<?php
require_once "includes/api/tripal_cv_xray.api.inc";
require_once "includes/Jobs/tripal_cv_xray.jobs.inc";
require_once "includes/tripal_cv_xray_cvterm_entity_config.form.inc";
require_once "includes/tripal_cv_xray.fields.inc";

/**
 * implement hook menu
 *
 * @return array Menu items
 */
function tripal_cv_xray_menu() {
  $admin_url_base = 'admin/tripal/extension/tripal_cv_xray';

  $items[$admin_url_base] = [
    'title' => 'Tripal CV X-ray',
    'description' => t('The CV-X-ray module allows you to create browsable CV trees with entities mapped onto the terms.  For example, you can create a GO tree for organisms that shows features for the organism.  These admin settings are for populating the tables necessary for these trees to work.'),
    'access arguments' => [' tripal cv xray'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_cv_xray_cvterm_entity_form'],
    'file' => 'includes/tripal_cv_xray_cvterm_entity_config.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_cv_xray'),
  ];

  $items['tripal_cv_xray/root-tree/%'] = [
    'page callback' => 'data__ontology_data_formatter::loadRootTree',
    'page arguments' => [2],
    'access arguments' => ['access content'],
    'file' => 'includes/TripalFields/data__ontology_data/data__ontology_data_formatter.inc',
    'file path' => drupal_get_path('module', 'tripal_cv_xray'),
    'type' => MENU_CALLBACK,
  ];

  $items['tripal_cv_xray/collections/%/%/%/%'] = [
    'title' => t('Create Collection'),
    'description' => t('Create a downloadable collection.'),
    'access arguments' => ['access content'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_cv_xray_collections_form', 2, 3, 4, 5],
    //db shortname, accession, anchor entity ID, mapping bundle ID
    'file' => 'includes/tripal_cv_xray_collections.form.inc',
    'file path' => drupal_get_path('module', 'tripal_cv_xray'),
  ];

  $items['cv_entities/%/%/%/%'] = [
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Matching Entities'),
    'description' => 'Mapped entities associated with a CVterm',
    'page callback' => 'tripal_cv_xray_entity_view',
    'page arguments' => [1, 2, 3, 4],
    //db shortname, accession, anchor entity ID, mapping bundle ID
    'file' => 'includes/tripal_cv_xray_entity_results.inc',
    'access arguments' => ['access content'],
    'file path' => drupal_get_path('module', 'tripal_cv_xray'),
  ];

  $items['cv_entities/lookup/%/%/%/%/children'] = [
    'access arguments' => ['access content'],
    'page callback' => 'tripal_cv_xray_entity_child_lookup_ajax',
    'page arguments' => [2, 3, 4, 5],
    //$vocabulary, $accession, $target_bundle_id, $anchor_entity_id)
    'file' => 'includes/api/tripal_cv_xray.api.inc',
    'file path' => drupal_get_path('module', 'tripal_cv_xray'),
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_cron_queue_info().
 *
 * Defined queues for use by our module.
 *
 * @return array
 */
function tripal_cv_xray_cron_queue_info() {
  $queues = [];

  $queues['tripal_cv_xray'] = [
    'worker callback' => 'XRayQueue::run',
    'time' => 60 * 2,
  ];

  return $queues;
}

/**
 * Implements hook_entity_delete().
 *
 * Deleted entities should be removed from the index.
 */

function tripal_cv_xray_entity_delete($entity, $type) {
  tripal_cv_xray_index_remove_single_entity($entity, $type);
}

//TODO:  Replace this with an importer hook
//function tripal_cv_xray_entity_insert($entity, $type) {
//  tripal_cv_xray_index_single_entity($entity, $type);
//}

/**
 * Dispatch a job to index the entity.
 *
 * @param $entity
 * @param $type
 *
 * @throws \Exception
 */
function tripal_cv_xray_index_single_entity($entity, $type) {
  if ($type != 'TripalEntity') {
    return;
  }

  $bundle_name = $entity->bundle;
  $bundle_id = str_replace('bio_data_', '', $bundle_name);

  // Get config for the entity type
  $config = db_select('tripal_cv_xray_config', 't')
    ->fields('t', ['shortname'])
    ->condition('bundle_id', $bundle_id)
    ->execute()
    ->fetchAll();

  if (empty($config)) {
    return;
  }

  // Get the bundle object for the indexer
  $query = db_select('chado_bundle', 'CB');
  $query->fields('CB', ['bundle_id', 'data_table']);
  $query->fields('TB', ['label']);
  $query->join('tripal_bundle', 'TB', 'TB.id = CB.bundle_id');
  $query->condition('bundle_id', $bundle_id);
  $bundle = $query->execute()->fetchObject();

  // Extract all db names for the indexer
  $cvs = [];
  foreach ($config as $record) {
    $cvs[] = $record->shortname;
  }

  $job = new XRayIndexerJob([
    'entity_id' => $entity->id,
    'bundle' => $bundle,
    'cv_shortnames' => array_unique($cvs),
  ]);

  // If the entity is in the index, remove it so that it can get re-indexed.
  tripal_cv_xray_index_remove_single_entity($entity, $type);

  XRayQueue::dispatch($job);
}

/**
 * Handle removable of entities from the index.
 *
 * @param $entity
 * @param $type
 */
function tripal_cv_xray_index_remove_single_entity($entity, $type) {
  if ($type != 'TripalEntity') {
    return;
  }

  // If the entity is in the index, remove it.
  db_delete('tripal_cvterm_entity_linker')
    ->condition('entity_id', $entity->id)
    ->execute();
}

